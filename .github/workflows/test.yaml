name: Test

env:
  SCRIPTS_DIR: ./.github/scripts

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  validate-manifests:
    runs-on: ubuntu-latest
    steps:
      - name: üìë Checkout
        uses: actions/checkout@v4
      - name: ‚õ¥Ô∏è Setup yq
        uses: fluxcd/pkg/actions/yq@main
      - name: ‚õ¥Ô∏è Setup kubeconform
        uses: fluxcd/pkg/actions/kubeconform@main
      - name: ‚õ¥Ô∏è Setup kustomize
        uses: fluxcd/pkg/actions/kustomize@main
      - name: ‚úÖ Validate manifests
        run: $SCRIPTS_DIR/validate-manifests.sh || exit 1
      - name: ‚öôÔ∏è Install talosctl
        run: curl -sL https://talos.dev/install | sh
      - name: üê≥ Provision Talos Linux cluster in Docker
        run: talosctl cluster create --name homelab-sandbox
      - name: üè° Set current cluster to 'homelab-sandbox'
        run: kubectl config use-context 'admin@homelab-sandbox' || exit 1
      - name: üîê Add SOPS GPG key
        run: |
          kubectl create secret generic sops-gpg \
            --namespace=flux-system \
            --from-literal=sops.asc='${{ secrets.SOPS_GPG_KEY }}'
      - name: ‚öôÔ∏è Setup Flux
        uses: fluxcd/flux2/action@main
      - name: ‚öôÔ∏è Install Flux
        run: flux install --components-extra="image-reflector-controller,image-automation-controller"
      - name: ü™µ Extract branch name
        run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        id: extract_branch
      - name: üîÅ Setup cluster reconciliation
        run: $SCRIPTS_DIR/e2e-setup-cluster-reconciliation.sh ${{ github.event.repository.html_url }} ${{ steps.extract_branch.outputs.branch }} ${{ matrix.environment }} ${{ github.actor }} ${{ secrets.GITHUB_TOKEN }}
      - name: ‚úÖüîÅ Verify cluster reconciliation
        run: $SCRIPTS_DIR/e2e-verify-cluster-reconciliation.sh
      - name: Debug failure
        if: failure()
        run: $SCRIPTS_DIR/e2e-debug-failure.sh
  verify-and-promote:
    runs-on: ubuntu-latest
    steps:
      - if: github.event_name != 'push'
        name: Skip
        run: exit 0
      - name: Checkout
        uses: actions/checkout@v4
      # - uses: autotelic/action-wait-for-status-check@v1
      #   id: wait-for-status
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     statusName: "kustomization/flux-system"
      # - name: Promote deployment to production
      #   if: steps.wait-for-status.outputs.state == 'success'
      #   uses: joelwmale/webhook-action@master
      #   with:
      #     url: ${{ secrets.WEBHOOK_URL }}
      #     headers: '{"repository": "joelwmale/webhook-action"}'
      #     body: '{"event": "deployment", "repository": "joelwmale/webhook-action"}'
      # - if: steps.wait-for-status.outputs.state == 'failure'
      #   run: exit 1
